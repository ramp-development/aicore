{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/updateInputs.ts", "../src/localisation/codeToCountry.ts", "../src/localisation/countryToCurrency.ts", "../src/localisation/ipinfo.ts", "../src/localisation/getCodes.ts", "../src/localisation/localiseElements.ts", "../src/localisation/index.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`http://localhost:${SERVE_PORT}/esbuild`).addEventListener('change', () =>\n  location.reload()\n);\n", "export const updateInputs = () => {\n  for (const [key, value] of Object.entries(window.aiCoreParams)) {\n    console.log(value);\n    if (value) {\n      console.log('has value');\n      const inputs = document.querySelectorAll(`input[type=\"hidden\"][name=\"${key}\"]`);\n      console.log(inputs);\n      Array.from(inputs).forEach((input) => {\n        input.value = value;\n      });\n    }\n  }\n};\n", "export const codeToCountry = {\n  AD: 'Andorra',\n  AE: 'United Arab Emirates',\n  AF: 'Afghanistan',\n  AG: 'Antigua and Barbuda',\n  AI: 'Anguilla',\n  AL: 'Albania',\n  AM: 'Armenia',\n  AO: 'Angola',\n  AQ: 'Antarctica',\n  AR: 'Argentina',\n  AS: 'American Samoa',\n  AT: 'Austria',\n  AU: 'Australia',\n  AW: 'Aruba',\n  AX: 'Aland Islands',\n  AZ: 'Azerbaijan',\n  BA: 'Bosnia and Herzegovina',\n  BB: 'Barbados',\n  BD: 'Bangladesh',\n  BE: 'Belgium',\n  BF: 'Burkina Faso',\n  BG: 'Bulgaria',\n  BH: 'Bahrain',\n  BI: 'Burundi',\n  BJ: 'Benin',\n  BL: 'Saint Barthelemy',\n  BM: 'Bermuda',\n  BN: 'Brunei',\n  BO: 'Bolivia',\n  BQ: 'Bonaire, Saint Eustatius and Saba ',\n  BR: 'Brazil',\n  BS: 'Bahamas',\n  BT: 'Bhutan',\n  BV: 'Bouvet Island',\n  BW: 'Botswana',\n  BY: 'Belarus',\n  BZ: 'Belize',\n  CA: 'Canada',\n  CC: 'Cocos Islands',\n  CD: 'Democratic Republic of the Congo',\n  CF: 'Central African Republic',\n  CG: 'Republic of the Congo',\n  CH: 'Switzerland',\n  CI: 'Ivory Coast',\n  CK: 'Cook Islands',\n  CL: 'Chile',\n  CM: 'Cameroon',\n  CN: 'China',\n  CO: 'Colombia',\n  CR: 'Costa Rica',\n  CU: 'Cuba',\n  CV: 'Cape Verde',\n  CW: 'Curacao',\n  CX: 'Christmas Island',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DE: 'Germany',\n  DJ: 'Djibouti',\n  DK: 'Denmark',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  DZ: 'Algeria',\n  EC: 'Ecuador',\n  EE: 'Estonia',\n  EG: 'Egypt',\n  EH: 'Western Sahara',\n  ER: 'Eritrea',\n  ES: 'Spain',\n  ET: 'Ethiopia',\n  FI: 'Finland',\n  FJ: 'Fiji',\n  FK: 'Falkland Islands',\n  FM: 'Micronesia',\n  FO: 'Faroe Islands',\n  FR: 'France',\n  GA: 'Gabon',\n  GB: 'United Kingdom',\n  GD: 'Grenada',\n  GE: 'Georgia',\n  GF: 'French Guiana',\n  GG: 'Guernsey',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GL: 'Greenland',\n  GM: 'Gambia',\n  GN: 'Guinea',\n  GP: 'Guadeloupe',\n  GQ: 'Equatorial Guinea',\n  GR: 'Greece',\n  GS: 'South Georgia and the South Sandwich Islands',\n  GT: 'Guatemala',\n  GU: 'Guam',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HK: 'Hong Kong',\n  HM: 'Heard Island and McDonald Islands',\n  HN: 'Honduras',\n  HR: 'Croatia',\n  HT: 'Haiti',\n  HU: 'Hungary',\n  ID: 'Indonesia',\n  IE: 'Ireland',\n  IL: 'Israel',\n  IM: 'Isle of Man',\n  IN: 'India',\n  IO: 'British Indian Ocean Territory',\n  IQ: 'Iraq',\n  IR: 'Iran',\n  IS: 'Iceland',\n  IT: 'Italy',\n  JE: 'Jersey',\n  JM: 'Jamaica',\n  JO: 'Jordan',\n  JP: 'Japan',\n  KE: 'Kenya',\n  KG: 'Kyrgyzstan',\n  KH: 'Cambodia',\n  KI: 'Kiribati',\n  KM: 'Comoros',\n  KN: 'Saint Kitts and Nevis',\n  KP: 'North Korea',\n  KR: 'South Korea',\n  KW: 'Kuwait',\n  KY: 'Cayman Islands',\n  KZ: 'Kazakhstan',\n  LA: 'Laos',\n  LB: 'Lebanon',\n  LC: 'Saint Lucia',\n  LI: 'Liechtenstein',\n  LK: 'Sri Lanka',\n  LR: 'Liberia',\n  LS: 'Lesotho',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  LV: 'Latvia',\n  LY: 'Libya',\n  MA: 'Morocco',\n  MC: 'Monaco',\n  MD: 'Moldova',\n  ME: 'Montenegro',\n  MF: 'Saint Martin',\n  MG: 'Madagascar',\n  MH: 'Marshall Islands',\n  MK: 'Macedonia',\n  ML: 'Mali',\n  MM: 'Myanmar',\n  MN: 'Mongolia',\n  MO: 'Macao',\n  MP: 'Northern Mariana Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MS: 'Montserrat',\n  MT: 'Malta',\n  MU: 'Mauritius',\n  MV: 'Maldives',\n  MW: 'Malawi',\n  MX: 'Mexico',\n  MY: 'Malaysia',\n  MZ: 'Mozambique',\n  NA: 'Namibia',\n  NC: 'New Caledonia',\n  NE: 'Niger',\n  NF: 'Norfolk Island',\n  NG: 'Nigeria',\n  NI: 'Nicaragua',\n  NL: 'Netherlands',\n  NO: 'Norway',\n  NP: 'Nepal',\n  NR: 'Nauru',\n  NU: 'Niue',\n  NZ: 'New Zealand',\n  OM: 'Oman',\n  PA: 'Panama',\n  PE: 'Peru',\n  PF: 'French Polynesia',\n  PG: 'Papua New Guinea',\n  PH: 'Philippines',\n  PK: 'Pakistan',\n  PL: 'Poland',\n  PM: 'Saint Pierre and Miquelon',\n  PN: 'Pitcairn',\n  PR: 'Puerto Rico',\n  PS: 'Palestinian Territory',\n  PT: 'Portugal',\n  PW: 'Palau',\n  PY: 'Paraguay',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RS: 'Serbia',\n  RU: 'Russia',\n  RW: 'Rwanda',\n  SA: 'Saudi Arabia',\n  SB: 'Solomon Islands',\n  SC: 'Seychelles',\n  SD: 'Sudan',\n  SE: 'Sweden',\n  SG: 'Singapore',\n  SH: 'Saint Helena',\n  SI: 'Slovenia',\n  SJ: 'Svalbard and Jan Mayen',\n  SK: 'Slovakia',\n  SL: 'Sierra Leone',\n  SM: 'San Marino',\n  SN: 'Senegal',\n  SO: 'Somalia',\n  SR: 'Suriname',\n  SS: 'South Sudan',\n  ST: 'Sao Tome and Principe',\n  SV: 'El Salvador',\n  SX: 'Sint Maarten',\n  SY: 'Syria',\n  SZ: 'Swaziland',\n  TC: 'Turks and Caicos Islands',\n  TD: 'Chad',\n  TF: 'French Southern Territories',\n  TG: 'Togo',\n  TH: 'Thailand',\n  TJ: 'Tajikistan',\n  TK: 'Tokelau',\n  TL: 'East Timor',\n  TM: 'Turkmenistan',\n  TN: 'Tunisia',\n  TO: 'Tonga',\n  TR: 'Turkey',\n  TT: 'Trinidad and Tobago',\n  TV: 'Tuvalu',\n  TW: 'Taiwan',\n  TZ: 'Tanzania',\n  UA: 'Ukraine',\n  UG: 'Uganda',\n  UM: 'United States Minor Outlying Islands',\n  US: 'United States',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VA: 'Vatican',\n  VC: 'Saint Vincent and the Grenadines',\n  VE: 'Venezuela',\n  VG: 'British Virgin Islands',\n  VI: 'U.S. Virgin Islands',\n  VN: 'Vietnam',\n  VU: 'Vanuatu',\n  WF: 'Wallis and Futuna',\n  WS: 'Samoa',\n  XK: 'Kosovo',\n  YE: 'Yemen',\n  YT: 'Mayotte',\n  ZA: 'South Africa',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe',\n};\n", "export const countryToCurrency = {\n  AD: 'EUR',\n  AE: 'AED',\n  AF: 'AFN',\n  AG: 'XCD',\n  AI: 'XCD',\n  AL: 'ALL',\n  AM: 'AMD',\n  AO: 'AOA',\n  AR: 'ARS',\n  AS: 'USD',\n  AT: 'EUR',\n  AU: 'AUD',\n  AW: 'AWG',\n  AX: 'EUR',\n  AZ: 'AZN',\n  BA: 'BAM',\n  BB: 'BBD',\n  BD: 'BDT',\n  BE: 'EUR',\n  BF: 'XOF',\n  BG: 'BGN',\n  BH: 'BHD',\n  BI: 'BIF',\n  BJ: 'XOF',\n  BL: 'EUR',\n  BM: 'BMD',\n  BN: 'BND',\n  BO: 'BOB',\n  BQ: 'USD',\n  BR: 'BRL',\n  BS: 'BSD',\n  BT: 'BTN',\n  BV: 'NOK',\n  BW: 'BWP',\n  BY: 'BYN',\n  BZ: 'BZD',\n  CA: 'CAD',\n  CC: 'AUD',\n  CD: 'CDF',\n  CF: 'XAF',\n  CG: 'CDF',\n  CH: 'CHF',\n  CI: 'XOF',\n  CK: 'NZD',\n  CL: 'CLP',\n  CM: 'XAF',\n  CN: 'CNY',\n  CO: 'COP',\n  CR: 'CRC',\n  CU: 'CUC',\n  CV: 'CVE',\n  CW: 'ANG',\n  CX: 'AUD',\n  CY: 'EUR',\n  CZ: 'CZK',\n  DE: 'EUR',\n  DJ: 'DJF',\n  DK: 'DKK',\n  DM: 'DOP',\n  DO: 'DOP',\n  DZ: 'DZD',\n  EC: 'USD',\n  EE: 'EUR',\n  EG: 'EGP',\n  EH: 'MAD',\n  ER: 'ERN',\n  ES: 'EUR',\n  ET: 'ETB',\n  FI: 'EUR',\n  FJ: 'FJD',\n  FM: 'USD',\n  FO: 'DKK',\n  FR: 'EUR',\n  GA: 'XAF',\n  GB: 'GBP',\n  GD: 'XCD',\n  GE: 'GEL',\n  GF: 'EUR',\n  GG: 'GBP',\n  GH: 'GHS',\n  GI: 'GIP',\n  GL: 'DKK',\n  GM: 'GMD',\n  GN: 'GNF',\n  GP: 'EUR',\n  GQ: 'XAF',\n  GR: 'EUR',\n  GT: 'GTQ',\n  GU: 'USD',\n  GW: 'XOF',\n  GY: 'GYD',\n  HK: 'HKD',\n  HN: 'HNL',\n  HR: 'EUR',\n  HT: 'HTG',\n  HU: 'HUF',\n  ID: 'IDR',\n  IE: 'EUR',\n  IL: 'ILS',\n  IM: 'GBP',\n  IN: 'INR',\n  IO: 'USD',\n  IQ: 'IQD',\n  IR: 'IRR',\n  IS: 'ISK',\n  IT: 'EUR',\n  JE: 'GBP',\n  JM: 'JMD',\n  JO: 'JOD',\n  JP: 'JPY',\n  KE: 'KES',\n  KG: 'KGS',\n  KH: 'KHR',\n  KI: 'AUD',\n  KM: 'KMF',\n  KN: 'XCD',\n  KP: 'KPW',\n  KR: 'KRW',\n  KW: 'KWD',\n  KY: 'KYD',\n  KZ: 'KZT',\n  LB: 'LBP',\n  LC: 'XCD',\n  LI: 'CHF',\n  LK: 'LKR',\n  LR: 'LRD',\n  LS: 'LSL',\n  LT: 'EUR',\n  LU: 'EUR',\n  LV: 'EUR',\n  LY: 'LYD',\n  MA: 'MAD',\n  MC: 'EUR',\n  MD: 'MDL',\n  ME: 'EUR',\n  MF: 'EUR',\n  MG: 'MGA',\n  MH: 'USD',\n  ML: 'XOF',\n  MM: 'MMK',\n  MN: 'MNT',\n  MO: 'MOP',\n  MP: 'USD',\n  MQ: 'EUR',\n  MR: 'MRU',\n  MS: 'XCD',\n  MT: 'EUR',\n  MU: 'MUR',\n  MV: 'MVR',\n  MW: 'MWK',\n  MX: 'MXN',\n  MY: 'MYR',\n  MZ: 'MZN',\n  NA: 'NAD',\n  NC: 'XPF',\n  NE: 'NGN',\n  NF: 'AUD',\n  NG: 'NGN',\n  NI: 'NIO',\n  NL: 'EUR',\n  NO: 'NOK',\n  NP: 'NPR',\n  NR: 'AUD',\n  NU: 'NZD',\n  NZ: 'NZD',\n  OM: 'OMR',\n  PA: 'PAB',\n  PE: 'PEN',\n  PF: 'XPF',\n  PG: 'PGK',\n  PH: 'PHP',\n  PK: 'PKR',\n  PL: 'PLN',\n  PM: 'EUR',\n  PN: 'NZD',\n  PR: 'USD',\n  PT: 'EUR',\n  PW: 'USD',\n  PY: 'PYG',\n  QA: 'QAR',\n  RE: 'EUR',\n  RO: 'RON',\n  RS: 'RSD',\n  RU: 'RUB',\n  RW: 'RWF',\n  SA: 'SAR',\n  SB: 'SBD',\n  SC: 'SCR',\n  SD: 'SDG',\n  SE: 'SEK',\n  SG: 'SGD',\n  SH: 'SHP',\n  SI: 'EUR',\n  SJ: 'NOK',\n  SK: 'EUR',\n  SL: 'SLL',\n  SM: 'EUR',\n  SN: 'XOF',\n  SO: 'SOS',\n  SR: 'SRD',\n  SS: 'SSP',\n  ST: 'STN',\n  SV: 'SVC',\n  SX: 'ANG',\n  SY: 'SYP',\n  SZ: 'SZL',\n  TC: 'USD',\n  TD: 'XAF',\n  TF: 'EUR',\n  TG: 'XOF',\n  TH: 'THB',\n  TJ: 'TJS',\n  TK: 'NZD',\n  TL: 'USD',\n  TM: 'TMT',\n  TN: 'TND',\n  TO: 'TOP',\n  TT: 'TTD',\n  TV: 'AUD',\n  TW: 'TWD',\n  TZ: 'TZS',\n  UA: 'UAH',\n  UG: 'UGX',\n  UM: 'USD',\n  US: 'USD',\n  UY: 'UYU',\n  UZ: 'UZS',\n  VA: 'EUR',\n  VC: 'XCD',\n  VE: 'VES',\n  VG: 'USD',\n  VI: 'USD',\n  VN: 'VND',\n  VU: 'VUV',\n  WF: 'XPF',\n  WS: 'USD',\n  YE: 'YER',\n  YT: 'EUR',\n  ZA: 'ZAR',\n  ZM: 'ZMW',\n  ZW: 'ZWL',\n  HM: 'AUD',\n  FK: 'FKP',\n  GS: 'GEL',\n  LA: 'LAK',\n  MK: 'MKD',\n  AQ: 'USD',\n  PS: 'ILS',\n};\n", "export const ipinfo = async () => {\n  const TOKEN = '74d1aaddf3b069';\n  const request = await fetch(`https://ipinfo.io/json?token=${TOKEN}`);\n  const response = await request.json();\n\n  return response;\n};\n", "import { codeToCountry } from './codeToCountry';\nimport { countryToCurrency } from './countryToCurrency';\nimport { ipinfo } from './ipinfo';\n\nexport const getCodes = async () => {\n  let countryCode = localStorage.getItem('countryCode'),\n    region = localStorage.getItem('region'),\n    currencyCode = localStorage.getItem('currencyCode');\n\n  if (!countryCode || !region) {\n    const info = await ipinfo();\n    countryCode = info.country;\n    region = info.region;\n  }\n\n  if (!currencyCode) {\n    /**\n     * define the accepted currencies\n     * the first of which will be taken as the default\n     */\n    const acceptedCurrencies = ['GBP', 'USD', 'EUR'];\n    const userCurrencyCode = countryToCurrency[countryCode];\n    currencyCode = acceptedCurrencies.includes(userCurrencyCode)\n      ? userCurrencyCode\n      : acceptedCurrencies[0];\n  }\n\n  const codes = {\n    countryCode,\n    country: codeToCountry[countryCode],\n    region,\n    currencyCode,\n  };\n\n  for (const [key, value] of Object.entries(codes)) {\n    if (!value) return;\n    localStorage.setItem(key, value);\n    window.aiCoreParams[key] = value;\n  }\n\n  return codes;\n};\n", "export const localiseElements = (toLocalise: [], currency: 'GBP' | 'USD' | 'EUR') => {\n  const localiseButtons = [...document.querySelectorAll('[data-localise-currency]')];\n  localiseButtons.forEach((button) => {\n    button.classList.remove('is-current');\n    if (button.dataset.localiseCurrency === currency) button.classList.add('is-current');\n  });\n\n  toLocalise.forEach((element) => {\n    const type = element.dataset.localiseType;\n    const values = element.dataset.localiseValues.split(',');\n    let localiseTo;\n    switch (currency) {\n      case 'GBP':\n        localiseTo = values[0].trim();\n        break;\n      case 'USD':\n        localiseTo = values[1].trim();\n        break;\n      case 'EUR':\n        localiseTo = values[2].trim();\n        break;\n      default:\n        localiseTo = values[0].trim();\n    }\n\n    if (type === 'currency') {\n      element.textContent = new Intl.NumberFormat(undefined, {\n        style: 'currency',\n        currency: currency,\n        maximumFractionDigits: 0,\n      }).format(localiseTo);\n    } else if (type === 'text') {\n      element.textContent = localiseTo;\n    } else if (type === 'link') {\n      element.textContent = localiseTo;\n      element.href = `${element.protocol}${localiseTo.replace(/\\s+/g, '')}`;\n    }\n  });\n};\n", "import { updateInputs } from '$utils/updateInputs';\n\nimport { getCodes } from './getCodes';\nimport { localiseElements } from './localiseElements';\n\n/**\n * 1. check if there is a localstate variable containing their currency\n *    a. show that currency\n *    b. end\n * 2. get the users location\n * 3. get their currency\n * 4. set the currency code to use (\u00A3, $ or \u20AC)\n *    a. save in localstate variable\n * 5. show elements in said currency\n * 6. wait for user to change their desired locale\n *    a. show updated currency when changed\n *\n */\n\nexport const localisation = async () => {\n  const toLocalise = document.querySelectorAll('[data-localise-values]');\n  if (!toLocalise) return;\n\n  const codes = await getCodes();\n  updateInputs();\n\n  localiseElements(toLocalise, codes?.currencyCode);\n\n  const localiseButtons = [...document.querySelectorAll('[data-localise-currency]')];\n  localiseButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      const currencyCode = button.dataset.localiseCurrency;\n      localiseElements(toLocalise, currencyCode);\n      localStorage.setItem('currencyCode', currencyCode);\n      window.aiCoreParams.currencyCode = currencyCode;\n    });\n  });\n};\n", "import { localisation } from './localisation';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  localisation();\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,oBAAoB,aAAoB,EAAE;AAAA,IAAiB;AAAA,IAAU,MACnF,SAAS,OAAO;AAAA,EAClB;;;ACFO,MAAM,eAAe,MAAM;AAChC,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,YAAY,GAAG;AAC9D,cAAQ,IAAI,KAAK;AACjB,UAAI,OAAO;AACT,gBAAQ,IAAI,WAAW;AACvB,cAAM,SAAS,SAAS,iBAAiB,8BAA8B,OAAO;AAC9E,gBAAQ,IAAI,MAAM;AAClB,cAAM,KAAK,MAAM,EAAE,QAAQ,CAAC,UAAU;AACpC,gBAAM,QAAQ;AAAA,QAChB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;;;ACZO,MAAM,gBAAgB;AAAA,IAC3B,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI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",
  "names": []
}
